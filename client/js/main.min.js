function Channel(a,b){this.name=a,this.subscribed=!1,this.client=b,this.connection=this.client.connection,this.events=this.connection.events}function Channels(){this.channels={}}function Client(a,b){this.host=a,this.port=b,this.connection=new ConnectionManager(this.host,this.port),this.socket=this.connection.socket,this.channels=new Channels}function ConnectionManager(a,b){this.host=a,this.port=b,this.tries=0,this.sessionID=Math.floor(1e9*Math.random()),this.connect(this.host,this.port),this.connectionStatus="",this.events={}}function Emit(){}Channel.prototype={constructor:Channel,subscribe:function(){this.subscribed=!0,this.client.sendEvent("client:subscribe",{channel:this.name})},unsubscribe:function(){this.subscribed=!1,this.client.sendEvent("client:unsubscribe",{channel:this.name})},bind:function(a,b){for(var c in this.events)c==a&&this.events[c].on(a,b)}},Channels.prototype={constructor:Channels,add:function(a,b){return this.channels[a]||(this.channels[a]=new Channel(a,b)),this.channels[a]},remove:function(a){var b=this.channels[a];return delete this.channels[a],b}},Client.prototype={constructor:Client,subscribe:function(a){var b=this.channels.add(a,this);return"connected"==this.connection.connectionStatus?b.subscribe():setTimeout(function(){b.subscribe()},1e3),b},unsubscribe:function(a){var b=this.channels.remove(a);"connected"==this.connection.connectionStatus&&b.unsubscribe()},sendEvent:function(a,b,c){return this.connection.sendEvent(a,b,c)}},ConnectionManager.prototype={constructor:ConnectionManager,limits:{time:5e3,bound:5},connect:function(a,b){var c=this,d="ws://"+a+":"+b;try{this.connectionStatus="connecting",this.socket=new WebSocket(d),this.socket.onopen=function(){c.connectionStatus="connected",console.log("Socket opened. Session ID: "+c.sessionID),c.tries=0},this.socket.onmessage=function(a){a=a.data;var b=JSON.parse(a),d=b.event,e=b.data,f=new Emit;c.events[d]=f,f.emit(d,e),console.log(b)},this.socket.onclose=function(){c.connectionStatus="closed",console.log("Connection closed by host."),console.log("Retrying in "+c.limits.time/1e3+" seconds."),c.tries<c.limits.bound?(c.tries++,console.log("Attempt "+c.tries+" - Retrying..."),c.retryConnection()):console.log("Max retries reached.")},this.socket.onerror=function(){console.error("Unidentified WebSocket error.")}}catch(e){console.log("Unexpected WebSocket error."+e)}},retryConnection:function(){var a=this;setTimeout(function(){a.connect(a.host,a.port)},a.limits.time)},getConnectionState:function(){return this.connectionStatus},sendEvent:function(a,b,c){var d={event:a,data:b};return c&&(d.channel=c),this.send(Util.encodeMessage(d))},send:function(a){return"connected"==this.connectionStatus?(this.socket.send(a),!0):!1}};var prototype=Emit.prototype;prototype.on=function(a,b,c){var d=this.emit||(this.emit={});return(d[a]||(d[a]=[])).push({func:b,context:c}),this},prototype.emit=function(a){for(var b=[].slice.call(arguments,1),c=((this.emit||(this.emit={}))[a]||[]).slice(),d=0;d<c.length;d++)c[d].func.apply(c[d].context,b);return this},prototype.off=function(a,b){var c=this.emit||(this.emit={}),d=c[a],e=[];if(d&&b)for(var f=0,g=d.length;g>f;f++)d[f].func!==b&&e.push(d[f]);return e.length?c[a]=e:delete c[a],this};var Util={};Util.encodeMessage=function(a){return JSON.stringify(a)};