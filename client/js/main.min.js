(function(){function a(){this._callbacks={}}function b(b){callbacks=new a,this.globalCallbacks=[],this.ft=b}a.prototype.add=function(a,b,c){this._callbacks[a]=this._callbacks[a]||[],this._callbacks[a].push({func:b,context:c})},a.prototype.remove=function(a){return 1==arguments.length?(delete this._callbacks[a],this):void 0},a.prototype.get=function(a){return this._callbacks[a]},b.prototype.bind=function(a,b,c){return this.callbacks.add(a,b,c),this},b.prototype.unbind=function(a,b,c){return this.callbacks.remove(a,b,c),this},b.prototype.emit=function(a,b){var c;for(c=0;c<this.globalCallbacks.length;c++)this.globalCallbacks[c](a,b);var d=this.callbacks.get(a);if(d&&d.length>0)for(c=0;c<d.length;c++)d[c].func.call(d[c].ctx||window,b);else this.ft&&this.ft(a,b);return this},PusherClone.Emit=b}).call(this),function(){function a(a,b){this.name=a,this.subscribed=!1,this.pusherClone=b,this.connection=this.pusherClone.connection,PusherClone.Emit.call(this)}var b=a.prototype;PusherClone.Util.extend(b,PusherClone.Emit.prototype),b.subscribe=function(){this.subscribed=!0,this.pusherClone.sendEvent("client:subscribe",{channel:this.name})},b.unsubscribe=function(){this.subscribed=!1,this.pusherClone.sendEvent("client:unsubscribe",{channel:this.name})},PusherClone.Channel=a}.call(this),function(){function a(){this.channels={}}a.prototype={constructor:a,add:function(a,b){return this.channels[a]||(this.channels[a]=new Channel(a,b)),this.channels[a]},remove:function(a){var b=this.channels[a];return delete this.channels[a],b}},PusherClone.Channels=a}.call(this),function(){function a(a,b){this.host=a,this.port=b,this.tries=0,this.sessionID=Math.floor(1e9*Math.random()),this.connect(this.host,this.port),this.connectionStatus="",PusherClone.Emit.call(this)}var b=a.prototype;PusherClone.Util.extend(b,PusherClone.Emit.prototype),b.limits={time:5e3,bound:5},b.connect=function(a,b){var c=this,d="ws://"+a+":"+b;try{this.connectionStatus="connecting",this.socket=new WebSocket(d),this.socket.onopen=function(){c.connectionStatus="connected",console.log("Socket opened. Session ID: "+c.sessionID),c.tries=0},this.socket.onmessage=function(a){a=a.data;var b=JSON.parse(a),d=b.event,e=b.data;c.emit(d,e)},this.socket.onclose=function(){c.connectionStatus="closed",console.log("Connection closed by host."),console.log("Retrying in "+c.limits.time/1e3+" seconds."),c.tries<c.limits.bound?(c.tries++,console.log("Attempt "+c.tries+" - Retrying..."),c.retryConnection()):console.log("Max retries reached.")},this.socket.onerror=function(){console.error("Unidentified WebSocket error.")}}catch(e){console.log("Unexpected WebSocket error."+e)}},b.retryConnection=function(){var a=this;setTimeout(function(){a.connect(a.host,a.port)},a.limits.time)},b.sendEvent=function(a,b,c){var d={event:a,data:b};return c&&(d.channel=c),this.send(Util.encodeMessage(d))},b.send=function(a){return"connected"==this.connectionStatus?(this.socket.send(a),!0):!1},PusherClone.ConnectionManager=a}.call(this),function(){function a(b,c){this.host=b,this.port=c,this.connection=new a.ConnectionManager(this.host,this.port),this.socket=this.connection.socket,this.channels=new a.Channels,this.emitter=new a.Emit}a.prototype={constructor:a,subscribe:function(a){var b=this.channels.add(a,this);return"connected"==this.connection.connectionStatus?(b.subscribe(),b):(setTimeout(function(){b.subscribe()},1e3),b)},unsubscribe:function(a){var b=this.channels.remove(a);"connected"==this.connection.connectionStatus&&b.unsubscribe()},sendEvent:function(a,b,c){return this.connection.sendEvent(a,b,c)},bind:function(a,b){return this.emitter.bind(a,b),this}},this.PusherClone=a}.call(this),function(){var a={};a.encodeMessage=function(a){return JSON.stringify(a)},a.extend=function(b){for(var c=0;c<arguments.length;c++){var d=arguments[1];for(var e in d)b[e]=d[e]&&d[e].constructor&&d[e].constructor==Object?a.extend(b[e]||{},d[e]):d[e]}return b},PusherClone.Util=a}.call(this);